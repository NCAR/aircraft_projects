# 
# These pppd parameters are used for the iridium connection because
# of the "call" parameter that is used to start pppd:
# pppd call iridium /dev/ttyACM1
#
# pppd will also read options from
# /etc/ppp/options and /etc/ppp/options.ttyACM1.
# 
# connect script
# Usually there is something which needs to be done to pre-
# pare the link before the PPP protocol can be started; for
# instance,  with a dial-up modem, commands need to be sent
# to the modem to dial the appropriate phone number.   This
# option specifies an command for pppd to execute (by pass-
# ing it to a shell) before attempting to start PPP negoti-
# ation.   The chat (8) program is often useful here, as it
# provides a way to send arbitrary strings to a  modem  and
# respond  to received characters.  A value for this option
# from a privileged source cannot be overridden by  a  non-
# privileged user.
# See this file for the phone number that is dialed
connect /etc/ppp/peers/iridium.chat

# Set the MRU [Maximum Receive Unit] value to n. Pppd  will
# ask  the  peer  to  send packets of no more than n bytes.
# The value of n must be between 128 and 16384; the default
# is  1500.   A  value of 296 works well on very slow links
# (40 bytes for TCP/IP header + 256 bytes of  data).   Note
# that  for  the  IPv6  protocol,  the MRU must be at least
# 1280.
mru 296

# Set the MTU [Maximum Transmit Unit] value to  n.   Unless
# the  peer  requests  a smaller value via MRU negotiation,
# pppd will request that the kernel  networking  code  send
# data packets of no more than n bytes through the PPP net-
# work interface.  Note that for the IPv6 protocol, the MTU
# must be at least 1280.
mtu 296

# logfile filename
# Append log messages to the  file  filename  (as  well  as
# sending  the log messages to syslog).  The file is opened
# with the privileges of the  user  who  invoked  pppd,  in
# append mode.
logfile /var/log/satcom/ppp_iridium.log

# auth   Require  the  peer to authenticate itself before allowing
# network packets to be sent or received.  This  option  is
# the  default  if the system has a default route.  If nei-
# ther this option nor the noauth option is specified, pppd
# will only allow the peer to use IP addresses to which the
# system does not already have a route.
# noauth Do not require the peer  to  authenticate  itself.   This
# option is privileged.
noauth

defaultroute

# debug  Enables connection debugging facilities.  If this  option
# is given, pppd will log the contents of all control pack-
# ets sent or received in a readable form.  The packets are
# logged  through  syslog  with  facility  daemon and level
# debug.  This information can be directed  to  a  file  by
# setting   up  /etc/syslog.conf  appropriately  (see  sys-
# log.conf(5)).
debug

# user name
# Sets the name used for authenticating the local system to
# the peer to name.
user rafgs1@local

# linkname name: Sets the logical name of the link to name.
# Pppd will  create  a file  named  ppp-name.pid  in /var/run
# (or /etc/ppp on some systems) containing its process ID.
# This can be useful  in  determining  which  instance of pppd
# is responsible for the link to a given peer system.
#  This is a privileged option.
#  This is set by ifup-ppp
# linkname iridium

# ipparam string: Provides an extra parameter to the ip-up, ip-pre-up
# and  ip-down scripts. If this option is given, the string supplied
# is given as the 6th parameter to those scripts.
#  This is set by ifup-ppp
# ipparam iridium

# persist: Do  not  exit  after  a connection is terminated; instead try to
# reopen the connection. The maxfail option still has an effect on
# persistent connections.
persist

# nodetach
# Don’t detach from the controlling terminal.  Without this
# option, if a serial device other than the terminal on the
# standard input is specified, pppd will fork to  become  a
# background process.
nodetach

# updetach: With this option, pppd will detach from its controlling terminal
# once  it has successfully established the ppp connection (to the
# point where the first network control protocol, usually  the  IP
# control protocol, has come up).
# updetach

# passive: Enables the "passive" option in the LCP.  With this option, pppd
# will  attempt  to initiate a connection; if no reply is received
# from the peer, pppd will then just wait passively  for  a  valid
# LCP  packet from the peer, instead of exiting, as it would with-
# out this option.
# passive

# maxfail n: Terminate after n consecutive failed connection attempts.
# A value of 0 means no limit.  The default value is 10.
# We'll let it fail, and then the script will start pppd again.
# This may have an advantage in that the serial port is re-opened.
maxfail 10

# lcp-echo-interval n: If this option is given, pppd will send
# an LCP echo-request frame to the peer every n seconds.  Normally
# the peer should respond to the echo-request by sending an
# echo-reply.   This  option   can   be   used   with   the
# lcp-echo-failure  option  to  detect  that the peer is no
# longer connected.
lcp-echo-interval 20

# lcp-echo-failure n: If this option is given, pppd will presume
# the peer to be dead if n LCP echo-requests are sent without
# receiving  a valid  LCP echo-reply.  If this happens, pppd will
# terminate the connection.  Use of this option requires a  non-
# zero  value  for  the  lcp-echo-interval parameter.  This
# option can be used to enable pppd to terminate after  the
# physical  connection has been broken (e.g., the modem has
# hung up) in situations where no  hardware  modem  control
# lines are available.
lcp-echo-failure 6

# lcp-max-configure n
# Set the maximum number of LCP configure-request transmis-
# sions to n (default 10).
lcp-max-configure 10

# lcp-max-failure n: Set  the  maximum  number  of LCP
# configure-NAKs returned before starting to send
# configure-Rejects  instead  to  n (default 10).
lcp-max-failure 10

# lcp-max-terminate n: Set the maximum number of LCP
# terminate-request transmissions to n (default 3).
lcp-max-terminate 5

# lcp-restart n: Set the LCP restart interval
# (retransmission timeout) to n seconds (default 3).
# pppd code says: Set time in seconds between LCP retransmissions
lcp-restart 20

# holdoff n: Specifies  how  many seconds to wait before
# re-initiating the link after it terminates.  This option only
# has any effect if the  persist or demand option is used.  The
# holdoff period is not applied if the link was  terminated
# because it was idle.
holdoff 5

# ipcp-accept-local: With this option, pppd will accept the
# peers idea of our local IP address, even if the local IP
# address was specified in an option.
ipcp-accept-local

# ipcp-accept-remote: With this option, pppd will accept the
# peers idea of its (remote) IP address, even if the remote
# IP address was specified in an option.
ipcp-accept-remote

# ipcp-max-configure n: Set the maximum number of IPCP 
# configure-request  transmissions to n (default 10).
ipcp-max-configure 10

# ipcp-max-failure n: Set  the  maximum  number of IPCP
# configure-NAKs returned before starting to send configure-Rejects
# instead  to  n (default 10).
ipcp-max-failure 10

# ipcp-max-terminate n: Set  the  maximum number of IPCP
# terminate-request transmissions to n (default 3).
ipcp-max-terminate 5

# ipcp-restart n: Set the IPCP restart interval (retransmission
# timeout) to n seconds (default 3).
ipcp-restart 20

# dump set options
dump

# ktune  Enables pppd to alter  kernel  settings  as  appropriate.
#     Under  Linux,  pppd  will  enable IP forwarding (i.e. set
#     /proc/sys/net/ipv4/ip_forward  to  1)  if  the   proxyarp
#     option  is  used,  and will enable the dynamic IP address
#     option (i.e. set /proc/sys/net/ipv4/ip_dynaddr to  1)  in
#     demand mode if the local address changes.
# Since we don't use proxyarp or demand mode, it probably isn't useful
# ktune

# proxyarp
# Add  an  entry  to  this system’s ARP [Address Resolution
# Protocol] table with the IP address of the peer  and  the
# Ethernet  address  of  this  system.   This will have the
# effect of making the peer appear to other systems  to  be
# on the local ethernet.
noproxyarp

#
# record filename
# Specifies that pppd should record all characters sent and
# received  to  a file named filename.  This file is opened
# in append mode, using the users user-ID and permissions.
# This  option is implemented using a pseudo-tty and a pro-
# cess to transfer characters between  the  pseudo-tty  and
# the  real  serial device, so it will increase the latency
# and CPU overhead of transferring data over the ppp inter-
# face.   The characters are stored in a tagged format with
# timestamps, which can be displayed in readable form using
# the pppdump(8) program.
# Not supported.
# record /tmp/ppp_record

# usepeerdns
# Ask  the  peer  for  up  to  2 DNS server addresses.  The
# addresses supplied by the peer (if any) are passed to the
# /etc/ppp/ip-up  script  in the environment variables DNS1
# and DNS2, and the environment variable USEPEERDNS will be
# set   to   1.    In   addition,   pppd   will  create  an
# /var/run/ppp/resolv.conf file containing one or two name-
# server lines with the address(es) supplied by the peer.

