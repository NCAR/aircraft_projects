#!/usr/bin/python

import xmlrpclib
import httplib
import sys
import os
import re
import string
from threading import Thread

class testit(Thread):
    lifeline = re.compile(r"(\d) received")

    def __init__ (self,ip):
        Thread.__init__(self)
        self.ip = ip
        self.status = 0
    def run(self):
        pingaling = os.popen("ping -q -c2 "+self.ip,"r")
        while 1:
            line = pingaling.readline()
            if not line: break
            igot = re.findall(self.lifeline,line)
            if igot:
                self.status = int(igot[0])


class TimeoutHTTPConnection(httplib.HTTPConnection):

    def connect(self):
        httplib.HTTPConnection.connect(self)
        self.sock.settimeout(self.timeout)

class TimeoutHTTP(httplib.HTTP):
    _connection_class = TimeoutHTTPConnection

    def set_timeout(self, timeout):
        self._conn.timeout = timeout

class TimeoutTransport(xmlrpclib.Transport):

    def make_connection(self, host):
        conn = TimeoutHTTP(host)
        conn.set_timeout(self.timeout)
        return conn

def Server(url, *args, **kwargs):
    t = TimeoutTransport()
    t.timeout = kwargs.get('timeout', 20)
    if 'timeout' in kwargs:
        del kwargs['timeout']
    kwargs['transport'] = t
    server = xmlrpclib.ServerProxy(url, *args, **kwargs)
    return server

if __name__ == "__main__":
    #build server string to create xmlrpc handle
    servString = "http://%s:%s" % (sys.argv[1],sys.argv[2])
    report = ("No response","Partial Response","Alive")

    #attempt to contact dsmserver via xmlrpc
    try:
        dsmServ = Server(servString)
        dsmList = dsmServ.GetDsmList()
    except:
        #failed to connect to DSM server via xmlrpc
        print "DSM-Server CRITICAL; Could not connect to DSM-Server: " + servString
        sys.exit(2)

    #check to see if DSM list is empty
    if (dsmList == ""):
        print "DSM-Server WARNING; Connected to server, but retrieved empty DSM list"
        sys.exit(1)

    #omit non ARCOM based DSMs from the list.
    if dsmList.has_key('acserver'):  del dsmList['acserver']
    if dsmList.has_key('localhost'): del dsmList['localhost']

    #set up some vars
    pinglist = []
    respList = []
    grepList = {}
    badList = []
    goodList = []

    #ping each DSM!
    for dsmname in dsmList.iterkeys() :
        current = testit(dsmname)
        pinglist.append(current)
        current.start()

    #read back responses from pings
    for pingle in pinglist:
        pingle.join()
        #print "Status from ",pingle.ip,"is",report[pingle.status]
        if (pingle.status == 2) :
            respList.append(pingle.ip)

    num_responses = len(respList)

    #determine where to start watching the log file from
    #this file is deleted before nagios starts by /etc/init.d/raf_nagios_init
    if not os.path.isfile("/tmp/ads3_debug.log.len"):
        os.system("wc -l /var/log/ads3_debug.log | sed 's/ .*//' > /tmp/ads3_debug.log.len")
    q = open("/tmp/ads3_debug.log.len")
    skiplines = q.readline().strip()

    #wait for DSMs to boot
    if (num_responses == 0) :
        print "PING DSMs CRITICAL; no DSMs responded to ping| %ddsms;%d;0;0;%d;" % (num_responses, len(dsmList)-1, len(dsmList) )
        sys.exit(2)

    #create regexp to match active DSMs
    regexp = "\(" + "\|".join( respList ) + "\)"

    #extract state of each compact flash card
    p = os.popen("tail -n +%s /var/log/ads3_debug.log | grep '%s' | grep ' CF: '" % (skiplines, regexp) )

    regexp = ".*" + string.replace(regexp, "\\", "") + " CF: (card missing|.*/media/cf)"
    regexp = re.compile(regexp)
    while 1:
      line = p.readline().strip()
      if not line: break
      m = regexp.match(line)
      if m:
          grepList[m.group(1)] = m.group(2)

    #build up a set of bad cards
    if grepList:
        for host, state in grepList.iteritems() :
            if "card missing" in state:
                badList.append(host)
            else:
                goodList.append(host)

    badS = " has"
    if (len(badList) > 1) :
        badS = "s have"

    goodS = " has"
    if (len(goodList) > 1) :
        goodS = "s have"

    #return a status message
    if (len(goodList) == len(dsmList)) :
        print "all DSMs responded with functional Compact Flash cards"
        sys.exit(0)

    elif len(badList) :
        print "the following DSM%s a broken Compact Flash card: %s" % (badS, ", ".join(badList) )
        sys.exit(2)

    elif len(goodList) :
        print "Compact Flash cards OK so far... the following DSM%s reported (%s of %s): %s" % (goodS, num_responses, len(dsmList), ", ".join(goodList) )
        sys.exit(1)

    else :
        plural = ""
        if (num_responses > 1) :
            plural = "s"

        print "PING DSMs WARNING; the following DSM%s responded (%s of %s): %s" % (plural, num_responses, len(dsmList), ", ".join(respList) )
        sys.exit(1)
