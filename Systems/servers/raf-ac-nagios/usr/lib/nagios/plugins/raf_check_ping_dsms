#!/usr/bin/python

import xmlrpclib
import httplib
import sys
import os
import re
from threading import Thread

class testit(Thread):
	lifeline = re.compile(r"(\d) received")

	def __init__ (self,ip):
		Thread.__init__(self)
		self.ip = ip
		self.status = 0 
	def run(self):
		pingaling = os.popen("ping -q -c2 "+self.ip,"r")
		while 1:
			line = pingaling.readline()
			if not line: break
			igot = re.findall(self.lifeline,line)
			if igot:
				self.status = int(igot[0])

class TimeoutHTTPConnection(httplib.HTTPConnection):

	def connect(self):
		 httplib.HTTPConnection.connect(self)
		 self.sock.settimeout(self.timeout)

class TimeoutHTTP(httplib.HTTP):
	_connection_class = TimeoutHTTPConnection

	def set_timeout(self, timeout):
		 self._conn.timeout = timeout

class TimeoutTransport(xmlrpclib.Transport):

	def make_connection(self, host):
		 conn = TimeoutHTTP(host)
		 conn.set_timeout(self.timeout)
		 return conn

def Server(url, *args, **kwargs):
	t = TimeoutTransport()
	t.timeout = kwargs.get('timeout', 20)
	if 'timeout' in kwargs:
		 del kwargs['timeout']
	kwargs['transport'] = t
	server = xmlrpclib.Server(url, *args, **kwargs)
	return server
	
if __name__ == "__main__":
	#build server string to create xmlrpc handle
	servString = "http://%s:%s" % (sys.argv[1],sys.argv[2])
	report = ("No response","Partial Response","Alive")
	
	#attempt to contact dsmserver via xmlrpc
	try:
		dsmServ = Server(servString)
		dsmList = dsmServ.GetDsmList()
	except: 
		#failed to connect to dsm server via xmlrpc
		print "DSM-Server CRITICAL; Could not connect to DSM-Server: " + servString
		sys.exit(2)
	
		
	#check to see if dsm list is empty
	if (dsmList == ""):
		print "DSM-Server WARNING; Connected to server, but retrieved empty DSM list"
		sys.exit(1)
	else :
		#set up some vars
		num_responses = 0 
		pinglist = []

		#ping each dsm!
		for host, dsmname in dsmList.iteritems() :
			current = testit(host)
			pinglist.append(current)
			current.start()
			
		#read back responses, parse into status for nagios
		for pingle in pinglist:
			pingle.join()
			#print "Status from ",pingle.ip,"is",report[pingle.status]
			if (pingle.status == 2) :
				num_responses += 1

		#return status (exit val), message (text before the '|'), and performance data (text after the '|') to nagios
		if (num_responses == len(dsmList)) :
			print "PING DSMs OK; all dsms responded to ping| %ddsms;%d;0;0;%d;" % (num_responses, len(dsmList)-1, len(dsmList) )
			sys.exit(0)
		elif (num_responses == 0) :
			print "PING DSMs CRITICAL; no dsms responded to ping| %ddsms;%d;0;0;%d;" % (num_responses, len(dsmList)-1, len(dsmList) )

			sys.exit(2)

		else : 
			print "PING DSMs WARNING; %d dsms of %d in list responded to ping| %ddsms;%d;0;0;%d;" % (num_responses, len(dsmList), num_responses, len(dsmList)-1, len(dsmList) )
			sys.exit(1)

