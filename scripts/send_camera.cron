#!/bin/sh
#
# Script to transmit latest camera image to the ground.
#
# This is set up to run out of a cron job every 2 minutes
# */2 * * * * /home/local/projects/scripts/send_camera.cron
#
set -x

# select datetime, ggalt from raf_lrt order by datetime desc limit 1;
#
# really we want to lookup ggalt at the time of the image, so we need
# to parse the image name to get the time.

# select datetime, ggalt from raf_lrt where datetime = '20140116T013100'
#
# 140114-055842.jpg
# 140114-055843.jpg

debug=0
camera_images_dir=`get_ac_config.py cameras.path`
psql="psql -d real-time -U ads"
if [ $debug -ne 0 ]; then
    psql="psql -h acserver -d real-time -U ads"
fi

camera_image_to_iso_time() # camera_filename
{
    timestring=`echo "$1" | sed -e \
	's/\([0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\)-\([0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\).jpg/20\1-\2-\3 \4:\5:\6/'`
    date --date="$timestring" +"%Y%m%dT%H%M%S"
}

camera_image_to_catalog_time() # camera_filename
{
    timestring=`echo "$1" | sed -e \
  's/\([0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\)-\([0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\).jpg/20\1-\2-\3 \4:\5:\6/'`
    date --date="$timestring" +"%Y%m%d%H%M"
}

get_altitude() # time
{
    # Units for GGALT are meters
    query="select ggalt from raf_lrt where datetime = '$1'"
    altitude=`$psql -t -c "$query" | tr -d ' '`
    if [ -n "$altitude" ]; then
	altitude="$altitude"m
    fi
    echo "$altitude"
}

if [ $debug -ne 0 ]; then
    camera_image_to_iso_time 130114-054042.jpg
    get_altitude `camera_image_to_iso_time 140116-004042.jpg`
    camera_images_dir="${RAW_DATA_DIR}/$PROJECT/camera_images"
fi

key=`echo $AIRCRAFT | cut -d _ -f 1`_camera_
#key=GV_camera_

# possible choices for the camera feed:
#  forward
#  down
#  left
#  right
#  montage  All four camera images in a quadrant.
#
camera=`$psql -t -c "SELECT value FROM mission_control WHERE key='camera';" | tr -d ' '`
if [ -z $camera ]; then
  $psql -t -c "INSERT INTO mission_control VALUES ('camera', 'forward');"
  camera=forward
fi
feed="$camera"
case "$feed" in

    left|right|down|forward)
	;;
    montage)
	# Key on left camera since it starts sooner
	camera="left"
	;;
    *)
	camera="forward"
	feed="$camera"
	;;
esac

# change into the current flight's folder
#flightdir=`ls -td ${camera_images_dir}/flight_number_* | grep -v tar | head -n1`
flightdir=${camera_images_dir}
flight=$flightdir/$camera
[[ -d $flight ]] || exit
cd $flight

# exit if folder is empty-ish
nfiles=`ls -l | wc -l`
[[ $nfiles -lt 3 ]] && exit

# create a folder to hold the sent files
[[ -d ../sent ]] || mkdir ../sent

# get the penultimate new file
file=`ls -t | head -n 3 | head -n 1`

# exit if this file is older than 3 minutes
let dtime=`date +%s`-`stat -c %X $file`
#[ $dtime -gt 180 ] && echo "not sending out old file: "$PWD"/"$file
if [ $debug -eq 0 ]; then
    [ $dtime -gt 180 ] && exit
fi

# Now we have a single camera image.  In montage mode, look for the
# same image time in the other camera directories.
case "$feed" in

    montage)
	if [ -f ../montage/${file} ]; then
	    cd ../montage
	    break
	fi
	quads=""
	for q in forward down left right ; do
	    if [ -f $flightdir/$q/$file ]; then
		quads="$quads $flightdir/$q/$file"
	    else
		quads="$quads null:"
	    fi
	done
	mkdir -p ../montage
	# The forward camera is a little larger than the others, so we must
	# resize all of them to fit evenly into the quadrants.
	montage $quads -background black -tile 2x2 -geometry 1280x960+1+1 \
	    ../montage/${file}
	cd ../montage
	;;
esac

# exit if this file was already sent
[[ -f ../sent/$key$file ]] && exit

# compress the file and add annotation

isotime=`camera_image_to_iso_time $file`
altitude=`get_altitude $isotime`
timestamp=`echo $file | sed 's/\.jpg//'`
title="$timestamp $altitude"
convert $file -sharpen 0.0x1.0 -scale 33% \
        -gravity northwest -fill 'grey80' -undercolor 'grey20' \
        -font "Helvetica-Bold" -pointsize 18 -annotate +5+20 "$title" \
        ../sent/$key$file

# insert it into the LDM queue
/home/ldm/bin/pqinsert -v ../sent/$key$file

#
# copy to CatalogIngest
#
catalog_ingest_dir=/data/catalog/incoming
if [ -d $catalog_ingest_dir ]; then
  catalog_time=`camera_image_to_catalog_time $file`
  PLANE=`echo $AIRCRAFT | cut -d _ -f 1`
  #product="$camera"_camera
  product=camera
  catalog_filename=aircraft.NSF_NCAR_$PLANE.$catalog_time.$product.jpg
  cp ../sent/$key$file $catalog_ingest_dir/$catalog_filename
fi
