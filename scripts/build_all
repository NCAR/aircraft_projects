#!/bin/bash
# for scons alias: bash doesn't expand aliases by default
source ~/.bashrc

   


# Notes:
# Does not cover: instrument repos (GNI, MTP), package repos (aircraft_rpms)
# project/scripts, or anything in svn (ADS2 related, mostly) as of 2023 
# nidas isn't built: preference given to packages

# Default is scons install rather than just build.
# End of script has odd builds ( aeros, ric, camera and ncplot ) 


# TODO:
# pretty print for REPORT/replace echo for more portability
# verify camera build

CLEAN=0
while getopts "hc:" flag; do
   case $flag in
      h) # display Help
         echo "help"
	 echo "
  build_all [-c]
  Builds all major ads software 
 
  Provides a quick way to build several repos at once
  with different build instructions.
  Script assumes it is being run from a directory
  that contains at least one of the target repos.  
  Must be run from /home/local directory if project/scripts in \$PATH
  OR copied from project/scripts to /home/local
  or /home/local equivalent

  Should be used after repo_checkout
  script intended for maintence builds, less for inital


  Options:
    -c      clean all known directories: both make and scons
    "
         exit;;
      c) # clean_all
	 CLEAN=1
	 ;;
   esac
done



num=0
if [ $#argv > 0 ]; then
  num=$1
fi

# Environment variables that are needed:
if [ ! $?LOCAL ]; then
    setenv LOCAL /opt/local
    echo "Environment variable LOCAL not set, setting to $LOCAL."
fi

REPORT=''
HOMEDIR=$(pwd)
sleep=0

# Check for netCDF installation.
if [ `/usr/bin/uname -i` = 'x86_64' ]; then
    set libdir=/usr/lib64
else
    set libdir=/usr/lib
fi

ls $libdir/libnetcdf* >& /dev/null
set rc1 = $status
ls $LOCAL/lib/libnetcdf* >& /dev/null
set rc2 = $status

# Checks for pre-req's netcdf, Qt, Qwt, motif/.
if [ [ $rc1 = 1 ] && [ $rc2 = 1] ]; then
    echo "netCDF appears to NOT be installed in either /usr/lib or $LOCAL."
    exit 1
fi

# Make sure all the [obvious] directories exist
test -d ${LOCAL}/bin || mkdir ${LOCAL}/bin
test -d ${LOCAL}/man/man1 || mkdir -p ${LOCAL}/man/man1
test -d ${LOCAL}/man/man3 || mkdir -p ${LOCAL}/man/man3

checkCleanStatus(){
    if [ $EXITSTATUS = 0 ]; then
      REPORT="${REPORT} Clean Status OK\n"
    else
      REPORT="${REPORT} Clean Error\n"
    fi
}
checkStatus(){
    if [ $EXITSTATUS = 0 ]; then
      REPORT="${REPORT} Build, Install Status OK\n"
    else
      REPORT="${REPORT} Build or Install Error\n"
    fi
}

#-------------------------------------------------------------------------------
# Programs using 'scons -j 8 install' 
# Add with explicit path to SConstruct from /home/local or equivalent
sconsPrograms=( "nimbus" "nc_utils" "caledit" "auto_cal" "kml_tools/acTrack2kml" "ncpp" "oap" "vardb" );	
for file in "${sconsPrograms[@]}"; 
do
  # check for $name or aircraft_$name
  if [ -d $file ] || [ -d "aircraft_${file}" ];
  then
    REPORT="${REPORT} ${file} FOUND:"
    cd $file || cd "aircraft_${file}"; echo "";
    if [ $CLEAN = 1 ] ; 
    then
      scons -c 
      EXITSTATUS=$?
      checkCleanStatus
    else
      scons install
      EXITSTATUS=$?
      checkStatus
    fi
  else
      REPORT="${REPORT} ${file} NOT FOUND\n"
  fi
  cd $HOMEDIR
done
#-------------------------------------------------------------------------------
# Aeros
if [ -d aeros/source ] ;
then
  REPORT="${REPORT} aeros FOUND:"
  cd aeros/source; echo "";
    if [ $CLEAN = 1 ] ; 
    then
      scons -c 
      EXITSTATUS=$?
      checkCleanStatus
    else
      scons deploy
      EXITSTATUS=$?
      if [ $EXITSTATUS = 0 ]; then
        REPORT="${REPORT} Build, Deploy Status OK\n"
      else
        REPORT="${REPORT} Build or Deploy Error\n"
      fi
    fi
else
    REPORT="${REPORT} aeros NOT FOUND\n"
fi
cd $HOMEDIR
#------------------------
# Ric install only for main ric server
if [ -d ric/src ] ;
then
  REPORT="${REPORT} ric FOUND:"
  cd ric/src; echo "";
    if [ $CLEAN = 1] ; 
    then
      scons -c 
      EXITSTATUS=$?
      checkCleanStatus
    else
      scons 
      EXITSTATUS=$?
      if [ $EXITSTATUS = 0 ]; then
        REPORT="${REPORT} Build Status OK\n"
      else
        REPORT="${REPORT} Build Error\n"
      fi
    fi
else
    REPORT="${REPORT} ric NOT FOUND\n"
fi
cd $HOMEDIR

#-------------------------------------------------------------------------------
# Programs using 'make install'.
# currently only ncplot, camera
#
if [ -d ncplot ]; 
then
  REPORT="${REPORT} ncplot FOUND:"
  cd ncplot
  echo ""
  if [ $CLEAN = 1 ] ; 
    then
      make clean
      EXITSTATUS=$?
      checkCleanStatus
    else
      make install
      EXITSTATUS=$?
      if [ $EXITSTATUS = 0 ];
      then
        REPORT="${REPORT} Build OK: check install in /opt/local/bin \n"
      else
        REPORT="${REPORT} Build ERROR \n"
      fi
  fi
else
  REPORT="${REPORT} ncplot NOT FOUND\n"
fi

cd $HOMEDIR
#------------------------
if [ -d camera ] || [ -d aircraft_camera ]; 
then
  REPORT="${REPORT} camera FOUND:"
  cd camera || cd aircraft_camera; echo "" 
  if [ $CLEAN = 1 ] ; 
    then
      make clean
      EXITSTATUS=$?
      checkCleanStatus
    else
      make install
      EXITSTATUS=$?
      if [ $EXITSTATUS = 0 ];
      then
        REPORT="${REPORT} Build OK: requires sudo install \n"
      else
        REPORT="${REPORT} Build ERROR \n"
      fi
  fi
else
  REPORT="${REPORT} camera NOT FOUND\n"
fi

cd $HOMEDIR
#-------------------------------------------------------------------------------

echo -e "\n\n\n$REPORT"
echo $CLEAN
